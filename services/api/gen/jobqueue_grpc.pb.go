// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/jobqueue.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobApi_SubmitJob_FullMethodName = "/jobqueue.v1.JobApi/SubmitJob"
	JobApi_GetJob_FullMethodName    = "/jobqueue.v1.JobApi/GetJob"
)

// JobApiClient is the client API for JobApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobApiClient interface {
	SubmitJob(ctx context.Context, in *SubmitJobReq, opts ...grpc.CallOption) (*SubmitJobResp, error)
	GetJob(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*GetJobResp, error)
}

type jobApiClient struct {
	cc grpc.ClientConnInterface
}

func NewJobApiClient(cc grpc.ClientConnInterface) JobApiClient {
	return &jobApiClient{cc}
}

func (c *jobApiClient) SubmitJob(ctx context.Context, in *SubmitJobReq, opts ...grpc.CallOption) (*SubmitJobResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitJobResp)
	err := c.cc.Invoke(ctx, JobApi_SubmitJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobApiClient) GetJob(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*GetJobResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobResp)
	err := c.cc.Invoke(ctx, JobApi_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobApiServer is the server API for JobApi service.
// All implementations must embed UnimplementedJobApiServer
// for forward compatibility.
type JobApiServer interface {
	SubmitJob(context.Context, *SubmitJobReq) (*SubmitJobResp, error)
	GetJob(context.Context, *GetJobReq) (*GetJobResp, error)
	mustEmbedUnimplementedJobApiServer()
}

// UnimplementedJobApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobApiServer struct{}

func (UnimplementedJobApiServer) SubmitJob(context.Context, *SubmitJobReq) (*SubmitJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedJobApiServer) GetJob(context.Context, *GetJobReq) (*GetJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedJobApiServer) mustEmbedUnimplementedJobApiServer() {}
func (UnimplementedJobApiServer) testEmbeddedByValue()                {}

// UnsafeJobApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobApiServer will
// result in compilation errors.
type UnsafeJobApiServer interface {
	mustEmbedUnimplementedJobApiServer()
}

func RegisterJobApiServer(s grpc.ServiceRegistrar, srv JobApiServer) {
	// If the following call pancis, it indicates UnimplementedJobApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobApi_ServiceDesc, srv)
}

func _JobApi_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobApiServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobApi_SubmitJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobApiServer).SubmitJob(ctx, req.(*SubmitJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobApi_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobApiServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobApi_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobApiServer).GetJob(ctx, req.(*GetJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JobApi_ServiceDesc is the grpc.ServiceDesc for JobApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobqueue.v1.JobApi",
	HandlerType: (*JobApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _JobApi_SubmitJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobApi_GetJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/jobqueue.proto",
}
